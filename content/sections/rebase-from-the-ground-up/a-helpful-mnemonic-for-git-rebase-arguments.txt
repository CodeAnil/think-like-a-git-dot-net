---
title:      "A Helpful Mnemonic for 'git rebase' Arguments"
created_at: 2011-10-03 00:58:22.703160 -07:00
layout:     section
filter:
  - erb
  - markdown
---

To summarize the previous section, this:

<code>
  git checkout foo<br />
  git checkout -b newbar<br />
  git cherry-pick C D E <br />
  git checkout bar <br />
  git reset --hard newbar <br />
  git branch -d newbar
</code>

is equivalent to this:

<code>
  git rebase foo bar
</code>

When you do a rebase, you are ***rewriting history.***  You are, in effect, saying to Git, "Hey, you know those things that happened over there on that completely different timeline?  I want you to pretend that they happened here instead."

The documentation for the rebase command lists a lot of different ways you can invoke it.  Frankly, I'm still not sure what some of them do, and I have a hard time parsing out the different parentheses and brackets to figure out exactly how you'd use, for example, <code class="inline">--onto</code>.

Here's how I think of it:  in English, we read **from left to right**.  On most charts that show the change in something over time, time is shown on the x-axis of the graph, with time increasing **from left to right**.  When you issue commands to the shell, you can put several of them on one line, and they'll be executed in order **from left to right**.

So when I use <code class="inline">git rebase</code>, I *(almost)* always give it two arguments:  the name of the place I want to start from, and the name of the place I want to end up.  Or, to put it another way, I tell rebase the sequence of events I want it to create, **from left to right**:  <code class="inline">git rebase first_this then_this</code>
